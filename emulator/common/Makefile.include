SHELL := /bin/bash
.SHELLFLAGS += -o pipefail

.SUFFIXES: # Disable built-in suffix rules

.PHONY: all
all: emulator

common      := $(srcDir)/emulator/common
install     := $(srcDir)/install

ELF         := elf2hex

# pipe processor output through the spike-dasm program to turn 
# raw instruction bits into pretty, readable diassembly
tracer := $(common)/tracer.py
disasm_exe := 3>&1 1>&2 2>&3 | $(tracer)
which_disasm := $(shell which spike-dasm)
ifneq ($(which_disasm),)
disasm_exe := $(disasm_exe) | $(which_disasm) $(DISASM_EXTENSION)
endif
disasm_exe := $(disasm_exe) >
 

MODEL := Top

seed=
MK_TARGET_PROC?=rv32_1stage

 
#choose between 32b anad 64b binaries, using proxy-kernel 
RV64_MODE?="false"
SUPERVISOR_MODE?="false"

# Prioritize Verilator installation from pkg-config
VERILATOR_INCLUDE := $(shell pkg-config --variable=includedir verilator)
ifeq ($(VERILATOR_INCLUDE),)
ifeq ($(VERILATOR_ROOT),)
$(error VERILATOR_ROOT is not set)
endif
VERILATOR_INCLUDE := $(VERILATOR_ROOT)/include
endif

ifeq ($(wildcard $(VERILATOR_INCLUDE)/vltstd/vpi_user.h),)
$(error <vltstd/vpi_user.h> not found in include path: $(VERILATOR_INCLUDE))
endif
 
# TODO: Remove since pk is unused
#RISCV_PK:= $(installTop)/riscv-pk/target/bin/pk
#PK_HEX  := $(addsuffix .hex,$(RISCV_PK))

# Allow us to use different Tracer modules for each processor
TRACERPATH?=$(common)
TRACER?=tracer
BP?=bp
BPPATH?=$(common)

CXXFLAGS += -O1 -std=c++11 -g
CXXFLAGS += -I$(srcDir)/emulator/common -I$(srcDir)/riscv-isa-sim

CXXSRCS := SimDTM
CXXDEBUGFLAGS := -DDEBUG

OBJS := $(addsuffix .o,$(CXXSRCS))
DEBUG_OBJS := $(addsuffix -debug.o,$(CXXSRCS))

CHISEL_ARGS := -td emulator/${MK_TARGET_PROC}/generated-src
CHISEL_ARGS_DEBUG := 

generated_dir := $(srcDir)/emulator/$(MK_TARGET_PROC)

generated-src/Top.v: $(srcDir)/src/${MK_TARGET_PROC}/*.scala $(srcDir)/src/common/*.scala
	cd $(buildDir) && $(SBT) "project ${MK_TARGET_PROC}" "run $(CHISEL_ARGS)"

$(addprefix $(generated_dir)/,$(OBJS)): $(generated_dir)/%.o: $(srcDir)/emulator/common/%.cc
	$(CXX) $(CXXFLAGS) -I${VERILATOR_INCLUDE} -c -o $@ $<

# generated-src-debug/Top.v: $(srcDir)/src/${MK_TARGET_PROC}/*.scala $(srcDir)/src/common/*.scala
# 	cd $(buildDir) && $(SBT) "project ${MK_TARGET_PROC}" "run $(CHISEL_ARGS_DEBUG)"


libfesvr_dir := $(generated_dir)/fesvr
libfesvr := $(libfesvr_dir)/libfesvr.a

$(libfesvr_dir)/Makefile: $(srcDir)/riscv-isa-sim/configure
	mkdir -p $(libfesvr_dir)
	cd $(libfesvr_dir) && $< --enable-sodor

.PHONY: fesvr
fesvr: $(libfesvr_dir)/Makefile
	$(MAKE) -C $(libfesvr_dir) $(notdir $(libfesvr))

$(libfesvr): fesvr


# Run Verilator to produce a fast binary to emulate this circuit.
VERILATOR := verilator --cc --exe 
VERILATOR_FLAGS := \
	--top-module Top \
	+define+PRINTF_COND=1 \
	--assert \
	--output-split 20000 \
	--x-assign unique \
	-I$(srcDir)/vsrc \
	-O3 \
	-CFLAGS "$(CXXFLAGS) -DVERILATOR -include $(srcDir)/emulator/common/verilator.h" \
	-LDFLAGS "$(LDFLAGS) $(libfesvr) -lpthread"

VERILATOR_SRCS := \
	generated-src/Top.v \
	$(srcDir)/vsrc/SimDTM.v \
	$(srcDir)/emulator/common/emulator.cpp \
	$(generated_dir)/SimDTM.o

VERILATOR_VLIBS := \
	$(srcDir)/vsrc/AsyncReadMem.sv \
	$(srcDir)/vsrc/SyncMem.sv

emulator: $(VERILATOR_SRCS) $(VERILATOR_VLIBS) $(libfesvr)
	$(VERILATOR) $(VERILATOR_FLAGS) -o $(generated_dir)/$@ $(VERILATOR_SRCS)
	$(MAKE) -C $(generated_dir)/obj_dir -f VTop.mk
 
# $(TRACER).o: $(TRACERPATH)/$(TRACER).h $(TRACERPATH)/$(TRACER).cpp generated-src/Top.h
# 	$(CXX) -c $(CXXFLAGS) $(TRACERPATH)/$(TRACER).cpp -I$(common) -I./generated-src -o $(TRACER).o
 
# $(TRACER)-debug.o: $(TRACERPATH)/$(TRACER).h $(TRACERPATH)/$(TRACER).cpp generated-src-debug/Top.h
# 	$(CXX) -c $(CXXFLAGS) $(TRACERPATH)/$(TRACER).cpp -I$(common) -I./generated-src-debug -o $(TRACER)-debug.o

# $(BP).o: $(BPPATH)/$(BP).h $(BPPATH)/$(BP).cpp generated-src/Top.h
# 	$(CXX) -c $(CXXFLAGS) $(BPPATH)/$(BP).cpp -I$(common) -I./generated-src -o $(BP).o
 
# $(BP)-debug.o: $(BPPATH)/$(BP).h $(BPPATH)/$(BP).cpp generated-src-debug/Top.h
# 	$(CXX) -c $(CXXFLAGS) $(BPPATH)/$(BP).cpp -I$(common) -I./generated-src-debug -o $(BP)-debug.o

emulator-debug: $(VERILATOR_SRCS) $(VERILATOR_VLIBS) $(libfesvr)
	$(VERILATOR) $(VERILATOR_FLAGS) --trace -o $(generated_dir)/$@ $(VERILATOR_SRCS)
	$(MAKE) -C $(generated_dir)/obj_dir -f VTop.mk
 
.PHONY: emulator emulator-debug

clean:
	rm -rf *.o *.a emulator obj_dir emulator-debug generated-src generated-src-debug DVEfiles output

clean-tests:
	rm -rf output/*.out

test:
	cd $(buildDir) && $(SBT) "project ${MK_TARGET_PROC}" "~make $(CURDIR) run-fast $(CHISEL_ARGS)"

.PHONY: clean clean-tests test

#--------------------------------------------------------------------
# Tests
#--------------------------------------------------------------------

include $(common)/tests.mk

# Globally installed assembly tests
global_tstdir = $(install)/riscv-tests

# Local assembly tests
local_tstdir = ../../test/riscv-tests

local_asm_tests := \
	$(local_asm_tests)
	#append any tests set by individual processors

# Globally installed benchmarks
global_bmarkdir = $(install)/riscv-bmarks

# Local benchmarks
local_bmarkdir = ../../test/riscv-bmarks
local_bmarks = \


#--------------------------------------------------------------------
# Run assembly tests and benchmarks
#--------------------------------------------------------------------
    
global_bmarks_out = $(addsuffix .riscv.out, $(global_bmarks))
global_bmarks_vcd = $(addsuffix .riscv.vcd, $(global_bmarks))
global_bmarks_outgz = $(addsuffix .riscv.out.gz, $(global_bmarks))
global_bmarks_vpd = $(addsuffix .riscv.vpd, $(global_bmarks))

asm_test_timeout ?=30000
bmark_timeout ?=1000000
                           
# allow some processors to override testmod when running benchmarks
filetype=riscv.hex
PK_PATH=
ifeq ($(SUPERVISOR_MODE),"true")
ifeq ($(RV64_MODE),"false")
	filetype=rv32s
	PK_PATH=PATH=$(install)/riscv-pk/bin:$(PATH);
else
	filetype=rv64s
	PK_PATH=RISCV=$(install)/riscv-pk64/;
	#$(install)/riscv-pk64/bin:$(PATH);
endif
else
ifeq ($(RV64_MODE),"false")
	filetype=riscv.hex
else
	filetype=rv64u
endif
endif

output:
	mkdir -p $@

output/%.vcd: $(global_tstdir)/% emulator-debug | output
	./emulator-debug -v$@ +max-cycles=$(asm_test_timeout) $< 2> /dev/null

output/%.out: $(global_tstdir)/% emulator $(tracer) | output
	./emulator +max-cycles=$(asm_test_timeout) $< $(disasm_exe) $@
#	-./emulator +max-cycles=$(asm_test_timeout) $(seed) +verbose +coremap-random +loadmem=$< none $(disasm_exe) $(patsubst %.out,%.temp,$@)
#	sed -e '/@@@/ !d' -e 's/-.*//g' -e 's/@@@ //' <$(patsubst %.out,%.temp,$@) >$(patsubst %.out,%.commit,$@)
#	sed -e '/@@@/ d' <$(patsubst %.out,%.temp,$@) >$@
#	rm $(patsubst %.out,%.temp,$@)

# Allow some cores to print out a "commit log", prepended with "@@@ ". Can be compared against the Spike ISA simulator.
output/%.vpd: output/%.hex emulator-debug | output
	-./emulator-debug +max-cycles=$(asm_test_timeout) $(seed) +verbose -v- $< 2> $(patsubst %.vpd,%.temp,$@) | vcd2vpd - $@ > /dev/null
	sed -e '/@@@/ !d' -e 's/-.*//g' -e 's/@@@ //' <$(patsubst %.vpd,%.temp,$@) >$(patsubst %.vpd,%.commit,$@)
	sed -e '/@@@/ d' <$(patsubst %.vpd,%.temp,$@) >$(patsubst %.vpd,%.out,$@)
	rm $(patsubst %.vpd,%.temp,$@)


ifeq ($(SUPERVISOR_MODE),"false")
 
$(addprefix output/, $(global_bmarks_out)): output/%.riscv.out: $(global_bmarkdir)/%.riscv emulator $(tracer) | output
	./emulator +max-cycles=$(bmark_timeout) +verbose $< $(disasm_exe) $@
$(addprefix output/, $(global_bmarks_vcd)): output/%.riscv.vcd: $(global_bmarkdir)/%.riscv emulator-debug | output
	./emulator-debug -v$@ +max-cycles=$(bmark_timeout) +verbose $< 2> /dev/null
$(addprefix output/, $(global_bmarks_outgz)): output/%.riscv.out.gz: emulator | output
	./emulator +max-cycles=$(bmark_timeout) +verbose $(global_bmarkdir)/$*.$(filetype) 2>&1 | gzip > $@
$(addprefix output/, $(global_bmarks_vpd)): output/%.riscv.vpd: emulator-debug | output
	./emulator-debug +max-cycles=$(bmark_timeout) $(seed) +verbose -v- $(global_bmarkdir)/$*.$(filetype) 2> $(patsubst %.vpd,%.out,$@) | vcd2vpd - $@ > /dev/null
 
else                                                   

# NO SUPERVISOR MODE TESTS FOR NOW

#$(addprefix output/, $(global_bmarks_out)): output/%.riscv.out: emulator $(PK_HEX) | output
#	-$(PK_PATH) ./emulator +max-cycles=$(bmark_timeout) $(seed) +loadmem=$(PK_HEX) none $(global_bmarkdir)/$*.$(filetype) 2> $@
#$(addprefix output/, $(global_bmarks_outgz)): output/%.riscv.out.gz: emulator $(PK_HEX) | output
#	$(PK_PATH) ./emulator-debug +max-cycles=$(bmark_timeout) +verbose $(seed) +loadmem=$(PK_HEX) none $(global_bmarkdir)/$*.$(filetype) 2>&1 | gzip > $@
#	$(PK_PATH) ./emulator-debug +max-cycles=$(bmark_timeout) +verbose $(seed) pk $(global_bmarkdir)/$*.$(filetype) 2>&1 | gzip > $@
#$(addprefix output/, $(global_bmarks_vpd)): output/%.riscv.vpd: emulator-debug $(PK_HEX) | output
#	-$(PK_PATH) ./emulator-debug +max-cycles=$(bmark_timeout) $(seed) -voutput/$*.riscv.vcd +verbose +loadmem=$(PK_HEX) none $(global_bmarkdir)/$*.$(filetype) 2>&1 | gzip > output/$*.riscv.out.gz; vcd2vpd output/$*.riscv.vcd output/$*.riscv.vpd; rm output/$*.riscv.vcd;
#	-$(PK_PATH) ./emulator-debug +max-cycles=$(bmark_timeout) $(seed) -v- +coremap-random +loadmem=$(PK_HEX) none $(global_bmarkdir)/$*.$(filetype) 2> $(patsubst %.vpd,%.out,$@) | vcd2vpd - $@ > /dev/null
#    
endif

run-asm-tests: $(addprefix output/, $(addsuffix .out, $(global_asm_tests)))
	@echo; perl -ne 'print "  [$$1] $$ARGV \t$$2\n" if /\*{3}(.{8})\*{3}(.*)/' $^; echo;
#run-bmarks-test: $(addprefix output/, $(addsuffix .riscv.out.gz, $(global_bmarks)))
run-bmarks-test: $(addprefix output/, $(addsuffix .riscv.out, $(global_bmarks)))
	-@echo; perl -ne 'print "  [$$1] $$ARGV \t$$2\n" if /\*{3}(.{8})\*{3}(.*)/' $^; echo;
run-asm-tests-debug: $(addprefix output/, $(addsuffix .vcd, $(global_asm_tests)))
	@echo; perl -ne 'print "  [$$1] $$ARGV \t$$2\n" if /\*{3}(.{8})\*{3}(.*)/' $(patsubst %.vpd,%.out,$^); echo;
run-bmarks-test-debug: $(addprefix output/, $(addsuffix .riscv.vcd, $(global_bmarks)))
	@echo; perl -ne 'print "  [$$1] $$ARGV \t$$2\n" if /\*{3}(.{8})\*{3}(.*)/' $(patsubst %.vpd,%.out,$^); echo;


run: run-asm-tests run-bmarks-test
run-debug: run-asm-tests-debug run-bmarks-test-debug
run-fast: $(addprefix output/, $(addsuffix .run, $(global_asm_tests) $(global_bmarks)))

.PHONY: run-asm-tests run-bmarks-test run-asm-tests-debug run-bmarks-test-debug
.PHONY: run run-debug run-fast
